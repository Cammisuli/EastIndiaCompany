@inherits Umbraco.Web.Mvc.UmbracoViewPage<Merchello.Bazaar.Models.ViewModels.MasterModel>
@using System.Web.Mvc.Html
@using Merchello.Bazaar.Models
@using Merchello.Core.Models
@using Merchello.Web
@using Umbraco.Web
@{
    // get all product folders
    var folders = Model.AncestorOrSelf(1).Children.Where(c => c.DocumentTypeAlias.Equals("folder", StringComparison.OrdinalIgnoreCase));

}
<section class="nav">
    <div class="top">
        <div class="search">
            Search <i class="fa fa-search"></i>
        </div>
        <div class="mobile-nav">
            <span class="lines-button x" type="button" role="button" aria-label="Toggle Navigation">
                <span class="lines"></span>
            </span>
        </div>
        <div class="account-info">
            @if (Model.CurrentCustomer.IsAnonymous)
            {
                <a href="@Model.RegistrationPage.Url">Register / Login</a>
            }
            else
            {
                <a href="@Model.AccountPage.Url">Account</a>
                var purchaseHistory = Model.AccountPage.Descendant("BazaarAccountHistory");
                if (purchaseHistory != null)
                {
                    <a href="@purchaseHistory.Url">Purchase History</a>
                }
                @Html.ActionLink("Logout", "HandleSignOut", "MembershipOperations", new { area = "Bazaar" }, null)
            }
            @if (!Model.CurrentCustomer.IsAnonymous && Model.ShowWishList)
            {
                <a href="@Model.WishListPage.Url">Wish List (@(((ICustomer)Model.CurrentCustomer).WishList().TotalItemCount))</a>
            }
            <a href="@Model.BasketPage.Url"><i class="fa fa-shopping-cart"></i> Basket (@Model.CurrentCustomer.Basket().TotalItemCount)</a>
        </div>
    </div>
    <div class="middle">
        <div class="logo">
            <a href="@Model.StorePage.Url">
                <img src="~/logo.png" alt="@Model.StoreTitle" />
            </a>
        </div>
    </div>
    <div class="bottom">
        <div class="nav-items">
            <ul>
                @foreach (var folder in folders)
                {
                    <li class="has-dropdown">

                        <a href="#">@folder.Name</a>
                        <ul class="dropdown">
                            @foreach (var group in folder.Children)
                            {
                                <li><a href="@group.Url">@group.Name</a></li>
                            }
                        </ul>
                    </li>
                }              
                <li><a href="#">Blog</a></li>
                <li><a href="#">About Us</a></li>
                <li><a href="#">Contact</a></li>
            </ul>

        </div>
    </div>
</section>

@*<div class="navbar navbar-default">
        <div class="container">
            <a class="navbar-brand" href="@Model.StorePage.Url">
                <img src="~/logo.png" alt="@Model.StoreTitle" />
            </a>
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>

            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    @foreach (var group in Model.ProductGroups)
                    {
                        <li><a href="@group.Url">@group.Name</a></li>
                    }
                </ul>
                <ul class="nav pull-right navbar-nav">
                    @if (Model.ShowAccount)
                    {
                        <li class="dropdown">
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#">@GetAccountDropDownName(Model.CurrentCustomer) <b class="caret"></b></a>
                            <ul class="dropdown-menu" id="swatch-menu">
                                @if (Model.CurrentCustomer.IsAnonymous)
                                {
                                    <li><a href="@Model.RegistrationPage.Url">Sign Up / Login</a></li>
                                }
                                else
                                {
                                    <li><a href="@Model.AccountPage.Url">Account</a></li>
                                    var purchaseHistory = Model.AccountPage.Descendant("BazaarAccountHistory");
                                    if (purchaseHistory != null)
                                        {
                                        <li><a href="@purchaseHistory.Url">Purchase History</a></li>
                                        }
                                    <li>@Html.ActionLink("Logout", "HandleSignOut", "MembershipOperations", new { area = "Bazaar" }, null)</li>
                                }
                            </ul>
                        </li>
                    }
                    @if (!Model.CurrentCustomer.IsAnonymous && Model.ShowWishList)
                    {
                        <li><a href="@Model.WishListPage.Url">Wish List (@(((ICustomer)Model.CurrentCustomer).WishList().TotalItemCount))</a></li>
                    }
                    <li><a href="@Model.BasketPage.Url">Cart (@Model.CurrentCustomer.Basket().TotalItemCount)</a></li>
                </ul>

            </div><!-- /.nav-collapse -->
        </div><!-- /navbar-inner -->
    </div>*@

@functions
{
    /// <summary>
    /// Returns the customer name or "Account" for the Account link based on login status
    /// </summary>
    /// <param name="currentCustomer">Mechello's <see cref="ICustomerBase"/></param>
    /// <returns>A string label for the Acccoun tab</returns>
    /// <remarks>
    /// A bit hacky here, but it does the trick.
    /// </remarks>
    private string GetAccountDropDownName(ICustomerBase currentCustomer)
    {
        if (currentCustomer.IsAnonymous) return "Account";

        var customer = (ICustomer)currentCustomer;
        var name = customer.FullName;

        if (!string.IsNullOrEmpty(name)) return name;

        return "Account";
    }

}
